// Generated by CoffeeScript 1.9.3
var async, jade, oid, pageOpt, pickScript, pre, render, u;

u = util;

oid = require('mongodb').ObjectID;

async = require('async');

jade = require('jade');

String.prototype.splitCap = function(i, t) {
  var it;
  return ((function() {
    var j, len, ref, results;
    ref = this.split(i);
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      it = ref[j];
      results.push(it.capitalize());
    }
    return results;
  }).call(this)).join(t);
};

pageOpt = function(c) {
  var code, libPath, resPath;
  libPath = c.resPath + "/upload/" + c.code + "/lib/";
  resPath = c.resPath + "/upload/" + c.code + "/";
  code = c.code;
  return {
    tRender: jade.renderFile,
    title: c.title,
    lang: 'zh',
    mode: app.env,
    _ts: new Date().getTime(),
    c: c,
    app: 'main',
    f: require('../ext/tmpl'),
    cstr: JSON.stringify(_.pick(c, 'code', 'name', 'url', '_id', 'resPath')),
    libPath: libPath,
    resPath: resPath,
    cssPath: function(name) {
      if (name == null) {
        name = 'css';
      }
      if (app.env) {
        if (name === 'admin') {
          return "/lib/admin/style/" + name + ".css";
        } else {
          return "/module/" + c.code + "/src/style/" + name + ".css";
        }
      } else {
        return "" + libPath + name + ".css?" + (new Date().getTime());
      }
    },
    jsPath: function(name) {
      if (name == null) {
        name = 'main';
      }
      return "" + libPath + name + ".js?" + (new Date().getTime());
    }
  };
};

pre = function(req) {
  var ctx, ps;
  ctx = pageOpt(req.c);
  if (req.query.dev) {
    ctx.dev = true;
  }
  ps = req.params;
  ctx.index = ps.page || ps.entity || 'index';
  return ctx;
};

pickScript = function(ctx, req) {
  var initOpt, opt, sc, ts;
  ts = {
    console: function(ctx) {
      ctx.app = 'admin';
      return null;
    }
  };
  sc = require("../views/module/" + ctx.c.code + "/script/tmplScript");
  initOpt = sc._init(ctx) || {};
  opt = sc[ctx.index] ? sc[ctx.index](ctx, req) || {} : ts[ctx.index] ? ts[ctx.index](ctx, req) || {} : {};
  opt.i18 = function(cb) {
    return dao.find(ctx.c.code, "i18n", {
      lang: req.query.lang || 'zh'
    }, {}, function(res) {
      var it, j, langs, len;
      langs = {};
      for (j = 0, len = res.length; j < len; j++) {
        it = res[j];
        langs[it.key] = it.val;
      }
      return cb(null, require('../service/lang')(langs));
    });
  };
  return _.extend(initOpt, opt);
};

render = function(req, rsp, ctx) {
  var opt;
  opt = pickScript(ctx, req);
  dao.pick(_mdb, 'cache').ensureIndex({
    time: 1
  }, {
    expireAfterSeconds: 7200,
    background: true
  });
  return async.parallel(opt, function(err, res) {
    var str;
    _.extend(ctx, res);
    str = jade.renderFile(req.fp + "/" + ctx.index + ".jade", ctx);
    if (!app.env) {
      dao.save(_mdb, 'cache', {
        k: req.k,
        str: str,
        time: new Date()
      });
    }
    return rsp.end(str);
  });
};

module.exports = {
  page: function(req, rsp) {
    return render(req, rsp, pre(req));
  },
  entity: function(req, rsp) {
    var ctx, filter;
    ctx = pre(req);
    filter = {};
    if (req.params.attr) {
      filter[req.params.attr] = req.params.id;
    } else {
      filter._id = req.params.id;
    }
    return dao.get(ctx.c.code, req.params.entity, filter, function(item) {
      if (!item) {
        rsp.end('no item');
      }
      ctx = _.extend(ctx, item);
      return render(req, rsp, ctx);
    });
  }
};
