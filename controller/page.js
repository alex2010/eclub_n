// Generated by CoffeeScript 1.9.1
var async, i18n, jade, oid, pageOpt, pickScript, pre, render, tmplUtil, ts, u;

u = require('../util');

oid = require('mongodb').ObjectID;

async = require('async');

tmplUtil = require('../views/tmplUtil');

ts = require('../views/tmplScript');

jade = require('jade');

i18n = require('../i18n/lang')('zh');

pageOpt = function(c) {
  var code;
  code = c.code;
  return {
    tRender: jade.renderFile,
    title: c.title,
    lang: 'zh',
    mode: app.env,
    c: c,
    app: 'main',
    f: tmplUtil,
    i18: i18n.load(code),
    cstr: JSON.stringify(_.pick(c, 'code', 'url')),
    cssPath: function(name) {
      if (name == null) {
        name = 'css';
      }
      return _resPath + "upload/" + c.code + "/lib/" + name + ".css?" + (new Date().getTime());
    },
    jsPath: function(name) {
      if (name == null) {
        name = 'main';
      }
      return _resPath + "upload/" + c.code + "/lib/" + name + ".js?" + (new Date().getTime());
    }
  };
};

pre = function(req) {
  var ctx, ps;
  ctx = pageOpt(req.c);
  ps = req.params;
  ctx.index = ps.page || ps.entity || 'index';
  return ctx;
};

pickScript = function(ctx) {
  var initOpt, opt, sc;
  sc = require("../public/module/" + ctx.c.code + "/tmplScript");
  initOpt = sc._init(ctx) || {};
  opt = sc[ctx.index] ? sc[ctx.index](ctx) || {} : ts[ctx.index] ? ts[ctx.index](ctx) || {} : {};
  return _.extend(initOpt, opt);
};

render = function(req, rsp, ctx) {
  var opt;
  opt = pickScript(ctx);
  dao.pick(_mdb, 'cache').ensureIndex({
    time: 1
  }, {
    expireAfterSeconds: 7200,
    background: true
  });
  return async.parallel(opt, function(err, res) {
    var str;
    _.extend(ctx, res);
    str = jade.renderFile(req.fp + "/" + ctx.index + ".jade", ctx);
    if (!app.env) {
      dao.save(_mdb, 'cache', {
        k: req.k,
        str: str,
        time: new Date()
      });
    }
    return rsp.end(str);
  });
};

module.exports = {
  page: function(req, rsp) {
    return render(req, rsp, pre(req));
  },
  entity: function(req, rsp) {
    var ctx;
    ctx = pre(req);
    return dao.get(ctx.c.code, req.params.entity, {
      _id: req.params.id
    }, function(item) {
      if (!item) {
        rsp.end('no item');
      }
      ctx = _.extend(ctx, item);
      return render(req, rsp, ctx);
    });
  }
};
