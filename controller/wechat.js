// Generated by CoffeeScript 1.9.3
var OAuth, async, getApi, tmplUtil, wtApi;

async = require('async');

tmplUtil = require('../ext/tmpl');

wtApi = require('wechat-api');

OAuth = require('wechat-oauth');

getApi = function(code, pubCode, func) {
  if (wtCtn[pubCode]) {
    return func(wtCtn[pubCode]);
  } else {
    return dao.get(code, 'pubAccount', {
      code: pubCode
    }, function(res) {
      var api;
      if (res) {
        api = new wtApi(res.appId, res.secret);
        wtCtn[pubCode] = api;
        return func(api);
      }
    });
  }
};

module.exports = {
  apiCall: function(name, opt) {
    return getApi;
  },
  createMenu: function(req, rsp) {
    return getApi(req.body.code, req.body.pubCode, function(api) {
      return api.createMenu(req.body.menu, function(err, res) {
        return rsp.send(res);
      });
    });
  },
  createLimitQRCode: function(req, rsp) {
    var code;
    code = req.body.code;
    return getApi(code, req.body.pubCode, function(api) {
      return api.createLimitQRCode(req.body.sceneId, function(err, res) {
        var filter, opt;
        filter = {
          pubCode: req.body.pubCode,
          $query: {},
          $orderby: {
            row: -1
          }
        };
        opt = {
          limit: 1
        };
        return dao.find(code, 'ticketTable', filter, opt, function(rTicket) {
          var row;
          row = 1;
          if (rTicket.length > 0) {
            row = rTicket[0].row + 1;
          }
          opt = {
            pubCode: req.body.pubCode,
            ticket: res.ticket,
            uid: new oid(req.body.uid),
            row: row
          };
          return dao.save(code, 'ticketTable', opt, function() {
            return rsp.send({
              url: api.showQRCodeURL(res.ticket)
            });
          });
        });
      });
    });
  },
  showQRCodeURL: function(req, rsp) {
    var code, filter;
    filter = {
      uid: new oid(req.body.uid),
      pubCode: req.body.pubCode
    };
    code = req.body.code;
    return dao.get(code, 'ticketTable', filter, function(res) {
      if (res) {
        return getApi(code, req.body.pubCode, function(api) {
          return rsp.send({
            url: api.showQRCodeURL(res.ticket)
          });
        });
      } else {
        return rsp.send({
          msg: '二维码未生产'
        });
      }
    });
  },
  uploadNews: function(req, rsp) {
    var code, isPre, opt, wCode;
    wCode = req.body.pAccount;
    code = req.c.code;
    opt = req.body.sendOpt;
    isPre = req.body.isPre;
    log(opt);
    return dao.get(code, 'codeMap', {
      type: 'wtStyle'
    }, function(resStyle) {
      var style;
      if (resStyle) {
        style = resStyle.value;
      }
      return getApi(code, wCode, function(api) {
        return async.each(opt, function(n, cb) {
          log(util.sPath(code + '/' + n.thumb_media_id));
          if (!n.thumb_media_id.startsWith('http')) {
            n.thumb_media_id = util.sPath(code + '/' + n.thumb_media_id);
          }
          return api.uploadMaterial(n.thumb_media_id, 'image', function(err, res) {
            var _id, entity, tmpl;
            log(res);
            n.thumb_media_id = res.MEDIA_ID;
            entity = util.del('entity', n);
            _id = util.del('_id', n);
            tmpl = util.del('tmpl', n);
            log(tmpl);
            if (entity && _id) {
              return dao.get(wCode, entity, {
                _id: _id
              }, function(et) {
                var content, ctx, k, path, v;
                log(et);
                ctx = {
                  code: code,
                  f: tmplUtil,
                  c: req.c
                };
                ctx[entity] = et;
                path = _path + "/public/module/" + code + "/tmpl/wechat/" + tmpl + ".jade";
                content = jade.renderFile(path, ctx);
                if (styles) {
                  for (k in styles) {
                    v = styles[k];
                    content.replaceAll("<" + k + ">", "<" + k + " style='" + v + "'>");
                  }
                }
                if (entity === 'post') {
                  content.replaceAll("<div id=", "<img id=");
                  content.replaceAll('Loading...</div>', '');
                }
                n.content = content;
                n.digest = et.brief;
                return cb();
              });
            } else {
              n.content || (n.content = 'no content');
              n.digest || (n.brief = 'no digest');
              return cb();
            }
          });
        }, function() {
          return api.uploadNews(opt, function(err, res) {
            log(err);
            if (isPre) {
              return dao.get(wCode, 'user', {
                _id: isPre
              }, function(user) {
                return api.previewNews(user.woid, res.media_id, function(err, res) {
                  return rsp.send({
                    success: true,
                    msg: '测试通过'
                  });
                });
              });
            } else {
              return api.massSendNews(res.media_id, {
                is_to_all: true
              }, function() {
                return rsp.send({
                  success: true,
                  msg: '发送成功'
                });
              });
            }
          });
        });
      });
    });
  },
  massSend: function(req, rsp) {
    return getApi(req.body.code, function(api) {
      return api.massSend(req.body.qrNum, function(err, res) {
        log('create qrcode');
        log(res);
        return api.showQRCodeURL(res.ticket, function(res) {
          log('qrcode');
          log(res);
          return rsp.send(res);
        });
      });
    });
  },
  userInfoByCode: function(req, rsp) {
    var code, func, page, qy, ref, wCode;
    log('userInfoByCode');
    qy = req.query;
    ref = qy.state.split('::'), wCode = ref[0], page = ref[1], func = ref[2];
    log(req.c);
    code = req.c.code;
    log(wCode);
    log(page);
    log(func);
    if (ctCtn[wCode]) {
      log('in this ctctn');
      ctCtn[wCode].getAccessToken(qy.code, function(err, result) {
        var accessToken, openid, ru;
        accessToken = result.data.access_token;
        openid = result.data.openid;
        ru = req.c.url + "/" + page + "?woid=" + openid + "&aToken=" + accessToken;
        if (ru.indexOf('http') === -1) {
          ru = 'http://' + ru;
        }
        if (func) {
          ru += "#!/" + (func.replace('azbzc', '/'));
        }
        if (result.data.scope === 'snsapi_userinfo') {
          return ctCtn[wCode].getUser(openid, function(err, res) {
            if (!res) {
              return;
            }
            return dao.get(code, 'user', {
              woid: openid
            }, function(user) {
              var _id, fn;
              if (user) {
                user.wunid = res.unionid;
              } else {
                _id = new oid();
                user = {
                  _id: _id,
                  username: res.nickname,
                  gender: res.sex === 1 ? true : false,
                  country: res.country,
                  woid: res.openid,
                  wunid: res.unionid,
                  info: {
                    address: res.province + " " + res.city
                  }
                };
              }
              if (res.headimgurl && (!user.refFile || !user.refFile.portrait)) {
                fn = user._id.toString() + '.jpg';
                gs('fetchFile')(res.headimgurl, (util.sPath(code)) + "/" + fn, function() {});
                user.refFile = {
                  portrait: [fn]
                };
              }
              dao.save(code, 'user', user);
              return rsp.redirect(ru);
            });
          });
        } else {
          return rsp.redirect(ru);
        }
      });
    } else {
      dao.get(code, 'pubAccount', {
        code: wCode
      }, function(res) {
        ctCtn[wCode] = new OAuth(res.appId, res.secret);
        log('zzz');
        log("http://" + req.c.url + "/" + page);
        return rsp.redirect("http://" + req.c.url + "/" + page);
      });
    }
  }
};
