// Generated by CoffeeScript 1.9.3
var async, attrs, buildQuery, cleanItem, dataController;

async = require('async');

attrs = function(attr) {
  var i, it, len, op, ref;
  op = {};
  ref = attr.split(',');
  for (i = 0, len = ref.length; i < len; i++) {
    it = ref[i];
    if (it.charAt(0) === '_') {
      continue;
    }
    op[it] = 1;
  }
  return op;
};

buildQuery = function(q) {
  var k, v;
  for (k in q) {
    v = q[k];
    if (k === 'rid' || k === 'uid' || k === '_id') {
      q[k] = new oid(v);
    }
  }
  return q;
};

cleanItem = function(q, isNew) {
  var k, v;
  if (isNew) {
    q.dateCreated = new Date();
  }
  q.lastUpdated = new Date();
  for (k in q) {
    v = q[k];
    if (k === 'rid' || k === 'uid') {
      q[k] = new oid(v);
    }
    if (k.toString().charAt(0) === '_') {
      delete q[k];
    }
  }
  return q;
};

dataController = {
  list: function(req, rsp) {
    var code, entity, op, q, qu;
    code = req.c.code;
    qu = req.query;
    if (qu) {
      op = {
        skip: util.d(qu, 'offset') || 0,
        limit: util.d(qu, 'max') || 10,
        sort: {
          lastUpdated: -1
        }
      };
      if (qu._attrs) {
        op.fields = attrs(util.d(qu, '_attrs'));
      }
    }
    q = buildQuery(qu.q);
    entity = req.params.entity;
    return dao.find(code, entity, q, op, function(entities) {
      return dao.count(code, entity, q, function(count) {
        return rsp.send(util.r(entities, count));
      });
    });
  },
  get: function(req, rsp) {
    var code, entity;
    code = req.c.code;
    entity = req.params.entity;
    return dao.get(code, entity, {
      _id: req.params.id
    }, function(item) {
      return rsp.send(util.r(item));
    });
  },
  getByKey: function(req, rsp) {
    var code, filter, pa;
    code = req.c.code;
    pa = req.params;
    filter = {};
    filter[pa.key] = pa.val;
    return dao.get(code, pa.entity, filter, function(item) {
      return rsp.send(util.r(item));
    });
  },
  edit: function(req, rsp) {
    var _attrs, after, bo, code, entity;
    code = req.c.code;
    entity = req.params.entity;
    bo = req.body;
    after = util.del('afterSave', req.body);
    _attrs = bo._attrs || '';
    _attrs = _attrs.split(',');
    _attrs.push('_id');
    cleanItem(bo);
    return dao.findAndUpdate(code, entity, {
      _id: req.params.id
    }, bo, function(item) {
      var i, it, len, ref;
      if (after) {
        ref = after.split(',');
        for (i = 0, len = ref.length; i < len; i++) {
          it = ref[i];
          gs(it)(req, item.value);
        }
      }
      return rsp.send(util.r(_.pick(item.value, _attrs)));
    });
  },
  save: function(req, rsp) {
    var _attrs, after, bo, code, entity;
    code = req.c.code;
    entity = req.params.entity;
    bo = req.body;
    after = util.del('afterSave', req.body);
    _attrs = bo._attrs || '';
    _attrs = _attrs.split(',');
    _attrs.push('_id');
    cleanItem(bo, true);
    return dao.save(code, entity, bo, function(item) {
      var i, it, len, ref;
      if (after) {
        ref = after.split(',');
        for (i = 0, len = ref.length; i < len; i++) {
          it = ref[i];
          gs(it)(req, item);
        }
      }
      return rsp.send(util.r(_.pick(item.value, _attrs)));
    });
  },
  del: function(req, rsp) {
    var code, entity;
    code = req.c.code;
    entity = req.params.entity;
    return dao.delItem(code, entity, {
      _id: req.params.id
    }, function() {
      return rsp.send({
        msg: 'del.ok'
      });
    });
  },
  cleanCache: function(req, rsp) {
    var opt;
    opt = {
      k: {
        $regex: req.c.url
      }
    };
    return dao.delItem(_mdb, 'cache', opt, function(res) {
      log(res);
      log('clean Cache...');
      return rsp.send({
        msg: 'del.ok'
      });
    });
  }
};

module.exports = dataController;
