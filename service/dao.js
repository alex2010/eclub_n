// Generated by CoffeeScript 1.9.3
var Connection, Db, Mongodb, Server, _, _opt, oid;

Mongodb = require('mongodb');

_ = require('underscore');

oid = require('mongodb').ObjectID;


_db={};
;

Db = Mongodb.Db;

Connection = Mongodb.Connection;

Server = Mongodb.Server;

_opt = {
  w: 1
};

module.exports = function() {
  this.newDb = function(name, callback) {
    var db, s;
    if (app.env) {
      s = {
        db_host: '127.0.0.1',
        db_port: 27017
      };
    } else {
      s = require("../views/module/" + name + "/script/setting");
    }
    db = new Db(name, new Server(s.db_host, s.db_port));
    db.open(function() {
      return typeof callback === "function" ? callback() : void 0;
    });
    return db;
  };
  this.pick = function(name, cName) {
    if (cName === 'community') {
      name = _mdb;
    }
    if (this.name !== name) {
      this.db = _db[name];
      if (!this.db) {
        this.db = _db[name] = this.newDb(name);
      }
      this.name = name;
    }
    if (this.cName !== cName || !this.collection) {
      this.cName = cName;
      this.collection = this.db.collection(cName);
    }
    return this.collection;
  };
  this.index = function(db, entity, index, opt) {
    return this.pick(db, entity).createIndex(index, opt);
  };
  this.get = function(db, entity, opt, callback) {
    opt = this.cleanOpt(opt);
    return this.pick(db, entity).findOne(opt, function(err, doc) {
      if (err) {
        log(err);
      }
      if (doc) {
        doc._e = entity;
      }
      return typeof callback === "function" ? callback(doc) : void 0;
    });
  };
  this.find = function(db, entity, filter, op, callback) {
    if (op == null) {
      op = {};
    }
    if (!op.sort) {
      op.sort = [['lastUpdated', 'desc']];
    }
    return this.pick(db, entity).find(filter, op).toArray(function(err, docs) {
      var i, it, len;
      if (err) {
        log(err);
      }
      for (i = 0, len = docs.length; i < len; i++) {
        it = docs[i];
        it._e = entity;
      }
      return typeof callback === "function" ? callback(docs) : void 0;
    });
  };
  this.cleanOpt = function(opt) {
    var it;
    if (opt._id) {
      if (_.isArray(opt._id)) {
        opt._id = (function() {
          var i, len, ref, results;
          ref = opt._id;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            it = ref[i];
            results.push(new oid(it));
          }
          return results;
        })();
      } else {
        opt._id = new oid(opt._id);
      }
    }
    return opt;
  };
  this.count = function(db, entity, opt, callback) {
    return this.pick(db, entity).count(opt, function(err, count) {
      if (err) {
        log(err);
      }
      return callback(count);
    });
  };
  this.findAndUpdate = function(db, entity, filter, opt, callback) {
    filter = this.cleanOpt(filter);
    delete opt._id;
    return this.pick(db, entity).findOneAndUpdate(filter, opt, function(err, doc) {
      if (err) {
        log(err);
      }
      return typeof callback === "function" ? callback(doc) : void 0;
    });
  };
  this.save = function(db, entity, items, callback) {
    var filter, i, it, keys, len, ref, results;
    ref = entity.split(':'), entity = ref[0], keys = ref[1];
    if (!_.isArray(items)) {
      items = [items];
    }
    if (keys) {
      keys = keys.split(',');
      results = [];
      for (i = 0, len = items.length; i < len; i++) {
        it = items[i];
        filter = _.pick(it, keys);
        results.push(this.pick(db, entity).update(filter, it, {
          upsert: true
        }, function(err, docs) {
          if (err) {
            throw err;
          }
          return typeof callback === "function" ? callback(docs) : void 0;
        }));
      }
      return results;
    } else {
      return this.pick(db, entity).insert(items, {
        safe: true
      }, function(err, docs) {
        if (err) {
          log(err);
        }
        return typeof callback === "function" ? callback(docs) : void 0;
      });
    }
  };
  this.del = function() {
    return log('rm');
  };
  this.delItem = function(db, entity, filter, opt, callback) {
    var m;
    if (opt == null) {
      opt = _opt;
    }
    filter = this.cleanOpt(filter);
    if (filter._id) {
      m = 'deleteOne';
    } else {
      m = 'deleteMany';
    }
    return this.pick(db, entity)[m](filter, opt, function(err, res) {
      if (err) {
        log(err);
      }
      log('del finish');
      return typeof callback === "function" ? callback(res) : void 0;
    });
  };
  this.remove = function(db, entity, filter, opt, callback) {
    if (opt == null) {
      opt = _opt;
    }
    return this.pick(db, entity).remove(filter, opt, callback);
  };
  this.close = function() {
    log('closed');
    return this.db.close();
  };
  return this;
};
