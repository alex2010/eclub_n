// Generated by CoffeeScript 1.9.3
var args, async, dao;

async = require('async');

args = null;

process.argv.forEach(function(val, index, array) {
  return args = array;
});

app = {};
_ = require('underscore');
_mdb = 'main';
log = console.log;
oid = require('mongodb').ObjectID;
code = args[2];
_env = true;
;

require('./ext/string');

dao = new require('./service/dao')();

dao.pick('main', 'cache');

dao.pick(code, 'post');

_.delay(function() {
  var data, entity, filter, k, ref, results, v;
  if (args.length > 3) {
    if (args[3] === '-p') {
      
            _env = false;
            ;
    } else {
      entity = args[3];
    }
  }
  if (entity) {
    filter = entity === 'user' || entity === 'role' ? {
      x: 'x'
    } : {};
    return dao.remove(code, entity, filter, {}, function() {
      var a, b, i, it, j, k, len, len1, list, ob, ref, ref1, results, v;
      list = [];
      ref = require("./views/module/" + code + "/data/" + entity);
      for (i = 0, len = ref.length; i < len; i++) {
        it = ref[i];
        ob = {};
        for (k in it) {
          v = it[k];
          if (v !== null && !(k === 'cid' || k === 'version')) {
            if (_.isString(v) && v.isEmpty()) {
              continue;
            }
            if (k.indexOf('_') > -1) {
              ref1 = k.split('_'), a = ref1[0], b = ref1[1];
              b = b.capitalize();
              k = [a, b].join('');
            } else if (k === 'category') {
              k = 'cat';
            }
            if (_.isString(v) && v.indexOf('{') === 0) {
              v = JSON.parse(v);
            } else if (v.length === 19 && v.indexOf('20') === 0) {
              v = Date.parseLocal(v);
            }
            if (k === 'ref_file') {
              k = 'refFile';
            }
            ob[k] = v;
          }
          if (entity === 'user') {
            if (it.woid) {
              ob.wt = {
                oid: it.woid
              };
              delete it.woid;
              if (it.wid) {
                ob.wt.id = it.wid;
                delete it.wid;
              }
              if (it.wunid) {
                ob.wt.unid = it.wunid;
                delete it.wunid;
              }
            }
          } else if (entity === 'cat') {
            if (ob.label) {
              ob.title = ob.label;
              delete ob.label;
            }
          }
        }
        list.push(ob);
      }
      if (entity === 'role') {
        entity += ':title';
      } else if (entity === 'user') {
        entity += ':username';
      }
      results = [];
      for (j = 0, len1 = list.length; j < len1; j++) {
        it = list[j];
        results.push(dao.save(code, entity, it, function(res) {
          var act, estr;
          if (entity === 'activity') {
            act = res.ops[0];
            estr = entity + ':_id';
            if (act.master && !act.master.isEmpty()) {
              filter = {
                username: {
                  $in: act.master.split(',')
                }
              };
              act.master = {};
              return dao.find(code, 'user', filter, {}, function(ru) {
                var l, len2, u;
                for (l = 0, len2 = ru.length; l < len2; l++) {
                  u = ru[l];
                  act.master[u._id] = _.pick(u, 'id', 'username', 'title', 'industry', 'introduction');
                }
                return dao.save(code, estr, act, function() {
                  if (act.cat) {
                    return dao.get(code, 'cat', {
                      code: act.cat
                    }, function(res) {
                      if (res) {
                        act.cat = {
                          title: res.title,
                          code: res.code
                        };
                        return dao.save(code, estr, act, function() {
                          if (act.vid) {
                            return dao.get(code, 'venue', {
                              id: act.vid
                            }, function(res) {
                              if (res) {
                                act.venue = {
                                  title: res.title,
                                  fee: res.fee,
                                  phone: res.phone,
                                  lng: res.lng,
                                  lat: res.lat
                                };
                                return dao.save(code, estr, act);
                              }
                            });
                          }
                        });
                      }
                    });
                  }
                });
              });
            }
          } else if (entity === 'post') {
            act = res.ops[0];
            estr = entity + ':_id';
            if (_.isString(act.uid) && act.uid.isEmpty()) {
              return;
            }
            log(act.uid);
            return dao.get(code, 'user', {
              id: act.uid
            }, function(doc) {
              log(doc);
              if (doc) {
                act.author = {
                  username: doc.username,
                  id: doc._id
                };
              }
              return dao.save(code, estr, act, function() {
                if (act.cat) {
                  return dao.get(code, 'cat', {
                    code: act.cat
                  }, function(res) {
                    if (res) {
                      act.cat = {
                        title: res.title,
                        code: res.code
                      };
                      return dao.save(code, estr, act);
                    }
                  });
                }
              });
            });
          }
        }));
      }
      return results;
    });
  } else {
    data = require("./views/module/" + code + "/script/data");
    dao.save(_mdb, 'community:code', data.community);
    ref = data.data;
    results = [];
    for (k in ref) {
      v = ref[k];
      results.push(dao.save(code, k, v));
    }
    return results;
  }
}, 1000);

_.delay(function() {
  return dao.close();
}, 4000);
