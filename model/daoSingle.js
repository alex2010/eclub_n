// Generated by CoffeeScript 1.7.1
var Connection, Db, Mongodb, Server, log, oid, settings;

settings = require('../setting');

Mongodb = require('mongodb');

oid = require('mongodb').ObjectID;

Db = Mongodb.Db;

Connection = Mongodb.Connection;

Server = Mongodb.Server;

log = console.log;

module.exports = function(name) {
  this.name = name;
  this.db = new Db(this.name || settings.code, new Server(settings.host, settings.port), {
    safe: true
  });
  this["switch"] = function(name, cName) {
    if (this.name !== name) {
      this.name = name;
      this.db = this.db.db(name);
    }
    return this.collection = this.db.collection(cName);
  };
  this.open = function() {
    if (!this.db.openCalled) {
      return this.db.open(function(err) {
        if (err) {
          return log(err);
        }
      });
    }
  };
  this.cleanOpt = function(opt) {
    if (opt._id) {
      opt._id = new oid(opt._id);
    }
    return opt;
  };
  this.count = function(entity, opt, callback) {
    return this.db.collection(entity, function(err, ct) {
      if (err) {
        log(err);
      }
      return ct.count(opt, function(err, count) {
        if (err) {
          log(err);
        }
        return callback(count);
      });
    });
  };
  this.get = function(entity, opt, callback) {
    opt = this.cleanOpt(opt);
    return this.db.collection(entity, function(err, ct) {
      return ct.findOne(opt, function(err, doc) {
        if (err) {
          log(err);
        }
        return typeof callback === "function" ? callback(doc) : void 0;
      });
    });
  };
  this.findAndUpdate = function(entity, filter, opt, callback) {
    filter = this.cleanOpt(filter);
    delete opt._id;
    return this.db.collection(entity, function(err, ct) {
      return ct.findOneAndUpdate(filter, opt, function(err, doc) {
        if (err) {
          log(err);
        }
        return typeof callback === "function" ? callback(doc) : void 0;
      });
    });
  };
  this.find = function(entity, opt, op, callback) {
    return this.db.collection(entity, function(err, ct) {
      log(ct);
      return ct.find(opt, op).toArray(function(err, docs) {
        if (err) {
          log(err);
        }
        return typeof callback === "function" ? callback(docs) : void 0;
      });
    });
  };
  this.save = function(entity, items, callback) {
    var keys, _ref;
    _ref = entity.split(':'), entity = _ref[0], keys = _ref[1];
    if (keys) {
      keys = keys.split(',');
    }
    log(entity);
    return this.db.collection(entity, function(err, ct) {
      var it, _i, _len, _results;
      if (err) {
        log(err);
      }
      if (!_.isArray(items)) {
        items = [items];
      }
      if (keys) {
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          it = items[_i];
          _results.push(ct.update(_.pick(it, keys), it, {
            upsert: true
          }, function(err, docs) {
            if (err) {
              throw err;
            }
            return typeof callback === "function" ? callback(docs) : void 0;
          }));
        }
        return _results;
      } else {
        return ct.insert(items, {
          safe: true
        }, function(err, docs) {
          if (err) {
            log(err);
          }
          return typeof callback === "function" ? callback(docs) : void 0;
        });
      }
    });
  };
  this.del = function(entity, opt, callback) {
    opt = this.cleanOpt(opt);
    return this.db.collection(entity, function(err, ct) {
      var m;
      if (err) {
        log(err);
      }
      if (opt._id) {
        m = 'deleteOne';
      } else {
        m = 'deleteMany';
      }
      return ct[m](opt, null, function(err, res) {
        if (err) {
          log(err);
        }
        return callback(res);
      });
    });
  };
  this.remove = function(entity) {
    return this.db.collection(entity, function(err, ct) {
      if (err) {
        log(err);
      }
      return ct.remove();
    });
  };
  this.close = function() {
    log('closed');
    return this.db.close();
  };
  return this;
};
